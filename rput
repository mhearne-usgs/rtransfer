#!/usr/bin/env python

import os.path
import subprocess
import argparse
import getpass
import json
import sys

def getCommandOutput(cmd):
    """
    Internal method for calling external command.
    @param cmd: String command ('ls -l', etc.)
    @return: Three-element tuple containing a boolean indicating success or failure, 
    the stdout from running the command, and stderr.
    """
    proc = subprocess.Popen(cmd,
                            shell=True,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE
                            )
    stdout,stderr = proc.communicate()
    retcode = proc.returncode
    if retcode == 0:
        retcode = True
    else:
        retcode = False
    return (retcode,stdout,stderr)

def readConfig():
    user = getpass.getuser()
    configfolder = os.path.join(os.path.expanduser('~'),'.rtransfer')
    configfile = os.path.join(configfolder,'config.json')
    if not os.path.isfile(configfile):
        return None
    hosts = json.load(open(configfile,'rt'))
    return hosts

def main(args):
    rfolder = args.arguments.pop()
    alias = args.arguments.pop()
    localfiles = args.arguments
    #make sure local files exist
    for lfile in localfiles:
        if not os.path.isfile(lfile):
            print 'Local file %s does not exist.  Exiting.' % lfile
            sys.exit(1)
    config = readConfig()
    if config is None:
        print 'No configuration found.  Run with -c to configure some hosts.'
        sys.exit(1)
    user = getpass.getuser()

    if not config.has_key(alias):
        print 'No config found for remote alias %s.  Here is a list of the currently configured systems.' % alias
        for host,hostdict in config.iteritems():
            fmt = 'Alias: %s \n\tHost: %s \n\tUsers home directory: %s \n\tService Account: %s'
            tpl = (host,hostdict['host'],hostdict['home'],hostdict['service'])
            print fmt % tpl
        sys.exit()

    hostdict = config[alias]
    scpcmd = 'scp %s %s@%s:%s' % (' '.join(localfiles),user,hostdict['host'],hostdict['home'])
    print 'Copying files from desktop to %s' % hostdict['host']
    retcode,stdout,stderr = getCommandOutput(scpcmd)
    rfiles = []
    for lfile in localfiles:
        fpath,fname = os.path.split(lfile)
        rfiles.append(os.path.join(hostdict['home'],fname))
    service_account = hostdict['service']
    sshcmd = 'ssh -t %s@%s "sudo chown %s %s;sudo mv %s %s"' % (user,hostdict['host'],service_account,' '.join(rfiles),' '.join(rfiles),rfolder)
    print 'Copying files from remote user to service account\n(you will be prompted for sudo password on %s)' % hostdict['host']
    print
    sys.stdout.write('[sudo] password for %s:' % user)
    sys.stdout.flush()
    retcode,stdout,stderr = getCommandOutput(sshcmd)
    print

if __name__ == '__main__':
    desc = '''Transfer files to a remote system with a service account.
    In order to avoid the sequence of ssh and scp commands required to copy files from 
    a directory on your local system to a "service" account on a remote system, this program
    automates as much of that as possible.
    Examples:

    To copy files to a remote system:
    rput file.txt file2.txt mysystem /home/service/data
    
    Copying files from remote user to service account 
    (you will be prompted for sudo password on mysystem)

    [sudo] password for mhearne:
    Copying remote files from your home directory on mysystem to service account folder.
    '''
    parser = argparse.ArgumentParser(description=desc,formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('arguments', help='Input list of arguments - last two must be alias and remote folder',nargs='+')
    pargs = parser.parse_args()

    main(pargs)
